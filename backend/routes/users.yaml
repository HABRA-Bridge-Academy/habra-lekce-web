components:
  schemas:
    ID:
      type: string
      pattern: '^[a-fA-F\d]{24}$'
      description: A unique identifier for an entity; 24 hex characters, MongoDB ObjectId
    Pagination:
      type: object
      properties:
        total:
          type: integer
        perPage:
          type: integer
        results:
          type: array
    Page:
      in: query
      name: page
      schema:
        type: integer
        minimum: 1
        default: 1
      description: Page number
    RoleString:
      type: string
      enum:
        - user
        - admin
        - registered
    UserEditBody:
      type: object
      properties:
        email:
          type: string
          format: email
        firstName:
          type: string
          example: Adam
        lastName:
          type: string
          example: Pyszko
        password:
          type: string
          minLength: 6
        role:
          $ref: "#/components/schemas/RoleString"
    User:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
          readOnly: true
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
          writeOnly: true
        role:
          $ref: "#/components/schemas/RoleString"
      required:
        - id
        - firstName
        - lastName
        - email
        - role

/users:
  get:
    tags:
      - User Management
    description: Returns a list of users
    summary: Get all users
    security:
        - sessionAuth: []
    parameters:
      - $ref: "#/components/schemas/Page"
    responses:
      200:
        description: A list of users
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Pagination"
                - type: object
                  properties:
                    results:
                      type: array
                      items:
                        $ref: "#/components/schemas/User"
      401:
        description: Unauthorized

  post:
    tags:
      - User Management
    summary: Create user
    description: Creates a new user
    requestBody:
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/User"
        application/json:
          schema:
            $ref: "#/components/schemas/User"
    responses:
      201:
        description: A user schema
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      401:
        description: Unauthorized
      400:
        description: Bad request

/users/{id}:
  get:
    tags:
      - User Management
    summary: Get user detail
    parameters:
      - in: path
        name: id
        schema:
          $ref: "#/components/schemas/ID"
        required: true
        example: 5f9d2c9e1c9d440000f3f5a0
        description: ID of the user to get
    description: Returns a single user
    responses:
      200:
        description: A single user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      404:
        description: User not found
      401:
        description: Unauthorized

  put:
    summary: Edit user
    tags:
      - User Management
    parameters:
      - in: path
        name: id
        schema:
          $ref: "#/components/schemas/ID"
        required: true
        description: ID of the user to update
    description: Updates a single user
    requestBody:
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/UserEditBody"
        application/json:
          schema:
            $ref: "#/components/schemas/UserEditBody"

    responses:
      200:
        description: User updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      404:
        description: User not found
      401:
        description: Unauthorized
  delete:
    summary: Delete user
    tags:
      - User Management
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: ID of the user to delete
    description: Deletes a single user
    responses:
      204:
        description: User deleted
      404:
        description: User not found
      401:
        description: Unauthorized
